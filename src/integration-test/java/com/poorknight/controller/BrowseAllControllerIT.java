package com.poorknight.controller;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.equalTo;

import java.net.URL;

import javax.faces.context.FacesContext;
import javax.inject.Inject;
import javax.transaction.UserTransaction;

import org.hamcrest.Matchers;
import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.container.test.api.RunAsClient;
import org.jboss.arquillian.drone.api.annotation.Drone;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.arquillian.test.api.ArquillianResource;
import org.jboss.arquillian.warp.Activity;
import org.jboss.arquillian.warp.Inspection;
import org.jboss.arquillian.warp.Warp;
import org.jboss.arquillian.warp.WarpTest;
import org.jboss.arquillian.warp.jsf.AfterPhase;
import org.jboss.arquillian.warp.jsf.Phase;
import org.jboss.arquillian.warp.servlet.BeforeServlet;
import org.jboss.shrinkwrap.api.Archive;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.openqa.selenium.WebDriver;

import com.poorknight.constants.ITConstants;
import com.poorknight.domain.Recipe;
import com.poorknight.domain.RecipeDAO;
import com.poorknight.testing.matchers.objects.IsSerializableMatcher;
import com.poorknight.utils.ArquillianUtils;


@WarpTest
@RunAsClient
@RunWith(Arquillian.class)
public class BrowseAllControllerIT {

	@Drone
	WebDriver browser;

	@ArquillianResource
	URL deploymentUrl;


	@Deployment(testable = true)
	public static Archive<?> createDeployment() {
		final WebArchive war = ArquillianUtils
				.createBasicPageTestDeployment("BrowseAllControllerIT", BrowseAllController.class, IsSerializableMatcher.class)
				.addClasses(ArquillianUtils.getRecipePersistenceClasses())
				.addAsWebInfResource("META-INF/test-persistence.xml", "classes/META-INF/persistence.xml");
		// System.out.println(war.toString(Formatters.VERBOSE)); -- use this and compare with expected structure from the actual war in the target
		// folder (generated by maven) ---- if there are problems figuring things out
		return war;
	}


	@Test
	public void controllerIsSerializableInContainer() throws Exception {
		Warp.initiate(new Activity() {

			@Override
			public void perform() {
				BrowseAllControllerIT.this.browser.get(getBrowseAllPage());
			}


			private String getBrowseAllPage() {
				return BrowseAllControllerIT.this.deploymentUrl.toExternalForm() + ITConstants.BROWSE_ALL_PAGE;
			}

		}).inspect(new Inspection() {

			private static final long serialVersionUID = -8709047973585367940L;

			@Inject
			private RecipeDAO dao;

			@Inject
			private UserTransaction transaction;


			// @BeforePhase(Phase.INVOKE_APPLICATION)
			@BeforeServlet
			public void populateDatabase() throws Exception {
				this.transaction.begin();

				this.dao.saveNewRecipe(new Recipe("testName1", "testDesc1"));
				this.dao.saveNewRecipe(new Recipe("testName2", "testDesc2"));

				this.transaction.commit();

				assertThat(this.dao.queryAllRecipes().size(), Matchers.equalTo(2));
			}


			@AfterPhase(Phase.RENDER_RESPONSE)
			// @AfterServlet
			public void testSerializability() {

				final FacesContext context = FacesContext.getCurrentInstance();
				final BrowseAllController controller = context.getApplication().evaluateExpressionGet(context, "#{browseAllController}",
						BrowseAllController.class);

				assertThat(controller.getAllRecipes().size(), equalTo(2));
				assertThat(controller, IsSerializableMatcher.isTrulySerializable());
			}
		});
	}

}
